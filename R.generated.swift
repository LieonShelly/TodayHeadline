//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `.swiftlint.yml`.
    static let swiftlintYml = Rswift.FileResource(bundle: R.hostingBundle, name: ".swiftlint", pathExtension: "yml")
    /// Resource file `Cartfile`.
    static let cartfile = Rswift.FileResource(bundle: R.hostingBundle, name: "Cartfile", pathExtension: "")
    
    /// `bundle.url(forResource: ".swiftlint", withExtension: "yml")`
    static func swiftlintYml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.swiftlintYml
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Cartfile", withExtension: "")`
    static func cartfile(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cartfile
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 10 images.
  struct image {
    /// Image `daren`.
    static let daren = Rswift.ImageResource(bundle: R.hostingBundle, name: "daren")
    /// Image `home_email_black`.
    static let home_email_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_email_black")
    /// Image `home_email_red`.
    static let home_email_red = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_email_red")
    /// Image `home_search_icon`.
    static let home_search_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_search_icon")
    /// Image `pinglun`.
    static let pinglun = Rswift.ImageResource(bundle: R.hostingBundle, name: "pinglun")
    /// Image `shaidan`.
    static let shaidan = Rswift.ImageResource(bundle: R.hostingBundle, name: "shaidan")
    /// Image `share`.
    static let share = Rswift.ImageResource(bundle: R.hostingBundle, name: "share")
    /// Image `wenzhang`.
    static let wenzhang = Rswift.ImageResource(bundle: R.hostingBundle, name: "wenzhang")
    /// Image `zan2`.
    static let zan2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "zan2")
    /// Image `zan`.
    static let zan = Rswift.ImageResource(bundle: R.hostingBundle, name: "zan")
    
    /// `UIImage(named: "daren", bundle: ..., traitCollection: ...)`
    static func daren(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.daren, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "home_email_black", bundle: ..., traitCollection: ...)`
    static func home_email_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_email_black, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "home_email_red", bundle: ..., traitCollection: ...)`
    static func home_email_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_email_red, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "home_search_icon", bundle: ..., traitCollection: ...)`
    static func home_search_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_search_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pinglun", bundle: ..., traitCollection: ...)`
    static func pinglun(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pinglun, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "shaidan", bundle: ..., traitCollection: ...)`
    static func shaidan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shaidan, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "share", bundle: ..., traitCollection: ...)`
    static func share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wenzhang", bundle: ..., traitCollection: ...)`
    static func wenzhang(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wenzhang, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "zan", bundle: ..., traitCollection: ...)`
    static func zan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zan, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "zan2", bundle: ..., traitCollection: ...)`
    static func zan2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zan2, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 7 nibs.
  struct nib {
    /// Nib `CycleCollectionViewCell`.
    static let cycleCollectionViewCell = _R.nib._CycleCollectionViewCell()
    /// Nib `CycleView`.
    static let cycleView = _R.nib._CycleView()
    /// Nib `HomeNaviBar`.
    static let homeNaviBar = _R.nib._HomeNaviBar()
    /// Nib `OneImageTableViewCell`.
    static let oneImageTableViewCell = _R.nib._OneImageTableViewCell()
    /// Nib `RecommendVideoTableViewCell`.
    static let recommendVideoTableViewCell = _R.nib._RecommendVideoTableViewCell()
    /// Nib `StickTopTableViewCell`.
    static let stickTopTableViewCell = _R.nib._StickTopTableViewCell()
    /// Nib `ThreeImageTableViewCell`.
    static let threeImageTableViewCell = _R.nib._ThreeImageTableViewCell()
    
    /// `UINib(name: "CycleCollectionViewCell", in: bundle)`
    static func cycleCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cycleCollectionViewCell)
    }
    
    /// `UINib(name: "CycleView", in: bundle)`
    static func cycleView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cycleView)
    }
    
    /// `UINib(name: "HomeNaviBar", in: bundle)`
    static func homeNaviBar(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeNaviBar)
    }
    
    /// `UINib(name: "OneImageTableViewCell", in: bundle)`
    static func oneImageTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.oneImageTableViewCell)
    }
    
    /// `UINib(name: "RecommendVideoTableViewCell", in: bundle)`
    static func recommendVideoTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.recommendVideoTableViewCell)
    }
    
    /// `UINib(name: "StickTopTableViewCell", in: bundle)`
    static func stickTopTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.stickTopTableViewCell)
    }
    
    /// `UINib(name: "ThreeImageTableViewCell", in: bundle)`
    static func threeImageTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.threeImageTableViewCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 6 storyboards.
  struct storyboard {
    /// Storyboard `Follow`.
    static let follow = _R.storyboard.follow()
    /// Storyboard `Home`.
    static let home = _R.storyboard.home()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Me`.
    static let me = _R.storyboard.me()
    /// Storyboard `Video`.
    static let video = _R.storyboard.video()
    
    /// `UIStoryboard(name: "Follow", bundle: ...)`
    static func follow(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.follow)
    }
    
    /// `UIStoryboard(name: "Home", bundle: ...)`
    static func home(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.home)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "Me", bundle: ...)`
    static func me(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.me)
    }
    
    /// `UIStoryboard(name: "Video", bundle: ...)`
    static func video(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.video)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _HomeNaviBar.validate()
    }
    
    struct _CycleCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CycleCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CycleCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CycleCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _CycleView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CycleView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CycleView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CycleView
      }
      
      fileprivate init() {}
    }
    
    struct _HomeNaviBar: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "HomeNaviBar"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> HomeNaviBar? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeNaviBar
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "home_email_black") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'home_email_black' is used in nib 'HomeNaviBar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "home_search_icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'home_search_icon' is used in nib 'HomeNaviBar', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _OneImageTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "OneImageTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> OneImageTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OneImageTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _RecommendVideoTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "RecommendVideoTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> RecommendVideoTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RecommendVideoTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _StickTopTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "StickTopTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> StickTopTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StickTopTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ThreeImageTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ThreeImageTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ThreeImageTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ThreeImageTableViewCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard {
    struct follow: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Follow"
      
      fileprivate init() {}
    }
    
    struct home: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Home"
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UITabBarController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      fileprivate init() {}
    }
    
    struct me: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Me"
      
      fileprivate init() {}
    }
    
    struct video: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Video"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}